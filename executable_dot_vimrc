set nocompatible
filetype off

set termguicolors
filetype plugin indent on

set updatetime=250
set fenc=utf-8
set number relativenumber
set clipboard+=unnamedplus
set colorcolumn=90
set completeopt-=preview
set cursorline
set ruler
set autoindent expandtab tabstop=4 softtabstop=4 shiftwidth=4
set list
set listchars=tab:\|·,trail:¶
set t_Co=256
set title

syntax enable

" Mapping
inoremap jk <Esc>
noremap £ :norm i#<CR>

" smooth-scrolling
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>

vmap <leader>y "+y
nmap <leader>p "+p

" replicate tmux ctrl-a z (focus current pane)
nnoremap <C-w>t :tabedit %<CR>==

" mappings for moving lines
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

" clear search
nmap <silent><leader><Space> :noh<CR>

:augroup numbertoggle
:  autocmd!
:  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
:  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
:augroup END

"
" Remove trailing white spaces on save
autocmd BufWritePre * :%s/\s\+$//e

" yaml syntax colorize
au BufNewFile,BufRead *.yaml,*.yml setf yaml

call plug#begin('~/.vim/plugged')
  Plug 'airblade/vim-gitgutter'
  Plug 'dense-analysis/ale'
  Plug 'easymotion/vim-easymotion'
  Plug 'elzr/vim-json'
  Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
  Plug 'hashivim/vim-terraform'
  Plug 'hexdigest/gounit-vim'
  Plug 'jiangmiao/auto-pairs'
  Plug 'junegunn/fzf'
  Plug 'junegunn/fzf.vim'
  Plug 'junegunn/goyo.vim'
  Plug 'mustache/vim-mustache-handlebars'
  Plug 'phoban01/vim-sunbather'
  Plug 'plasticboy/vim-markdown'
  Plug 'roxma/nvim-yarp'
  Plug 'ryanoasis/vim-devicons'
  Plug 'scrooloose/nerdcommenter'
  Plug 'scrooloose/nerdtree'
  Plug 'sheerun/vim-polyglot'
  Plug 'terryma/vim-smooth-scroll'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-git'
  Plug 'tpope/vim-rhubarb'
  Plug 'tpope/vim-surround'
  Plug 'itchyny/lightline.vim'
  Plug 'vim-scripts/syntaxrange'
  Plug 'vim-syntastic/syntastic'
  Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'Yggdroot/indentLine'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'mattn/emmet-vim'
call plug#end()

" theme
set background=dark
colorscheme sunbather

if (has("nvim"))
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
if (has("termguicolors"))
  set termguicolors
endif

" lightline
let g:lightline = {
  \ 'colorscheme': '16color',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'FugitiveHead'
  \ },
  \ }
set noshowmode

" Deoplete
let g:deoplete#enable_at_startup = 1

" NERDTree Config
map <C-n> :NERDTreeToggle<CR>
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
autocmd FileType nerdtree set norelativenumber
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeShowHidden=1
let NERDTreeShowLineNumbers=0
let NERDTreeQuitOnOpen=1
let NERDTreeIgnore = ['.DS_Store']
let NERDTreeDirArrowExpandable = ''
let NERDTreeDirArrowCollapsible = ''

" NERDCommenter Config
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'
let g:NERDAltDelims_java = 1
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
let g:NERDToggleCheckAllLines = 1

" vim-devicons Config
let g:webdevicons_conceal_nerdtree_brackets = 1
let g:DevIconsEnableFoldersOpenClose = 1

" vim-go Config
let g:go_fmt_command = "goimports"
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_format_strings = 1
let g:go_auto_type_info = 1
let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']
let g:go_metalinter_autosave = 0
let g:go_def_mapping_enabled = 1
let g:go_gopls_settings = { 'buildFlags': '-tags=ignore' }

map <silent> <leader>gfs :GoFillStruct<CR>
map <silent> <leader>gie :GoIfErr<CR>
map <leader>gt <Plug>(go-test)
map <leader>gtf <Plug>(go-test-func)
map <leader>gtt <Plug>(go-coverage-toggle)
map <silent> <leader>gg :GoAlternate<CR>

" EasyMotion Config
let g:EasyMotion_do_mapping = 0 " Disable default mappings
let g:EasyMotion_smartcase = 1
map <leader>j <Plug>(easymotion-j)
map <leader>k <Plug>(easymotion-k)
nmap s <Plug>(easymotion-overwin-f)
nmap s <Plug>(easymotion-overwin-f2)

" FZF config
function! s:fzf_neighbouring_files()
  let current_file =expand("%")
  let cwd = fnamemodify(current_file, ':p:h')
  let command = 'ag -g "" -f ' . cwd . ' --depth 0'
  call fzf#run({
        \ 'source': command,
        \ 'sink':   'e',
        \ 'options': '-m -x +s',
        \ 'window':  'enew' })
endfunction
command! FZFNeigh call s:fzf_neighbouring_files()
command! FZFMru call fzf#run({
\  'source':  v:oldfiles,
\  'sink':    'e',
\  'options': '-m -x +s',
\  'down':    '40%'})

nmap <C-p> :Files<CR>
nmap <C-f>  :Ag<CR>
nmap <C-g>  :Rg<CR>
nmap <leader>r  :FZFMru<CR>

" Terraform Config
let g:terraform_align=1
let g:terraform_fmt_on_save=1

" Git Config
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '>'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '^'
let g:gitgutter_sign_modified_removed = '<'
let g:gitgutter_override_sign_column_highlight = 1
highlight SignColumn guibg=bg
highlight SignColumn ctermbg=bg
nmap <leader>gn <Plug>(GitGutterNextHunk)  " git next
nmap <leader>gp <Plug>(GitGutterPrevHunk)  " git previous
nmap <leader>ga <Plug>(GitGutterStageHunk) " git add (chunk)
nmap <leader>gu <Plug>(GitGutterUndoHunk)  " git undo
nmap <leader>gs :Gstatus<CR>
nmap <leader>gc :Gcommit<CR>
nmap <leader>gb :Gblame<CR>

command! Greview :Git! diff --staged
nnoremap <leader>gr :Greview<cr>
autocmd QuickFixCmdPost *grep* cwindow

" Supertab
let g:SuperTabDefaultCompletionType = "<c-n>"

" Markdown
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
let g:vim_markdown_folding_disabled = 1

" JSON
" autocmd Filetype json :IndentLinesDisable
let g:vim_json_syntax_conceal = 0

" Neosnippet
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
let g:neosnippet#snippets_directory = '~/.config/nvim/snippets'

" Syntastic
let g:syntastic_auto_jump = 0
let g:syntastic_mode_map = { 'passive_filetypes': ['python'] }

" Set spellchecker for markdown
autocmd FileType markdown setlocal spell
autocmd FileType gitcommit setlocal spell
"
" Enable dictionary auto-completion in Markdown files and Git Commit Messages
autocmd FileType markdown setlocal complete+=kspell
autocmd FileType gitcommit setlocal complete+=kspell

" Set yaml tabstop
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType yml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType helm setlocal ts=2 sts=2 sw=2 expandtab

" ALE
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_sign_error = '❌'
let g:ale_sign_warning = '⚠'
let g:ale_lint_on_text_changed = 'never'
let g:ale_python_flake8_options = '--max-line-length=90'
let g:ale_fix_on_save = 1

let g:ale_fixers = {
\  'generic': [
\    'remove_trailing_lines',
\    'trim_whitespace'
\  ],
\  'python': [
\    'add_blank_lines_for_python_control_statements',
\    'isort',
\    'autoimport',
\    'autopep8',
\    'black',
\    'yapf',
\  ],
\  'javascript': [
\    'eslint',
\    'prettier'
\  ],
\  'typescript': [
\    'eslint',
\    'prettier'
\  ],
\  'typescriptreact': [
\    'eslint',
\    'prettier'
\  ]
\
\}

" goyo
nmap <leader>f :Goyo<CR>
let g:goyo_height = 300
let g:goyo_width =  140

" emmet
let g:user_emmet_settings = {
\ 'typescript': {
\     'extends' : 'jsx',
\ },
\ 'typescriptreact': {
\     'extends' : 'jsx',
\ }
\}
